// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DischargeApproval extends ethereum.Event {
  get params(): DischargeApproval__Params {
    return new DischargeApproval__Params(this);
  }
}

export class DischargeApproval__Params {
  _event: DischargeApproval;

  constructor(event: DischargeApproval) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LiquidityProviderRegistered extends ethereum.Event {
  get params(): LiquidityProviderRegistered__Params {
    return new LiquidityProviderRegistered__Params(this);
  }
}

export class LiquidityProviderRegistered__Params {
  _event: LiquidityProviderRegistered;

  constructor(event: LiquidityProviderRegistered) {
    this._event = event;
  }

  get liquidityProviderId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get walletManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReleaseApproval extends ethereum.Event {
  get params(): ReleaseApproval__Params {
    return new ReleaseApproval__Params(this);
  }
}

export class ReleaseApproval__Params {
  _event: ReleaseApproval;

  constructor(event: ReleaseApproval) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TimelockApproval extends ethereum.Event {
  get params(): TimelockApproval__Params {
    return new TimelockApproval__Params(this);
  }
}

export class TimelockApproval__Params {
  _event: TimelockApproval;

  constructor(event: TimelockApproval) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TokenContractConfigsSet extends ethereum.Event {
  get params(): TokenContractConfigsSet__Params {
    return new TokenContractConfigsSet__Params(this);
  }
}

export class TokenContractConfigsSet__Params {
  _event: TokenContractConfigsSet;

  constructor(event: TokenContractConfigsSet) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityProvider(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get assetDepositMin(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetDepositMax(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenCreatorConfigsSet extends ethereum.Event {
  get params(): TokenCreatorConfigsSet__Params {
    return new TokenCreatorConfigsSet__Params(this);
  }
}

export class TokenCreatorConfigsSet__Params {
  _event: TokenCreatorConfigsSet;

  constructor(event: TokenCreatorConfigsSet) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creatorAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get annuityPercent(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenDischargeTimelock extends ethereum.Event {
  get params(): TokenDischargeTimelock__Params {
    return new TokenDischargeTimelock__Params(this);
  }
}

export class TokenDischargeTimelock__Params {
  _event: TokenDischargeTimelock;

  constructor(event: TokenDischargeTimelock) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get unlockBlock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenReleaseTimelock extends ethereum.Event {
  get params(): TokenReleaseTimelock__Params {
    return new TokenReleaseTimelock__Params(this);
  }
}

export class TokenReleaseTimelock__Params {
  _event: TokenReleaseTimelock;

  constructor(event: TokenReleaseTimelock) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get unlockBlock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UniverseSet extends ethereum.Event {
  get params(): UniverseSet__Params {
    return new UniverseSet__Params(this);
  }
}

export class UniverseSet__Params {
  _event: UniverseSet;

  constructor(event: UniverseSet) {
    this._event = event;
  }

  get universeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateContractWhitelist extends ethereum.Event {
  get params(): UpdateContractWhitelist__Params {
    return new UpdateContractWhitelist__Params(this);
  }
}

export class UpdateContractWhitelist__Params {
  _event: UpdateContractWhitelist;

  constructor(event: UpdateContractWhitelist) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ChargedParticles__dischargeParticleResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles__dischargeParticleAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles__releaseParticleResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ChargedParticles extends ethereum.SmartContract {
  static bind(address: Address): ChargedParticles {
    return new ChargedParticles("ChargedParticles", address);
  }

  baseParticleMass(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): BigInt {
    let result = super.call(
      "baseParticleMass",
      "baseParticleMass(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_baseParticleMass(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseParticleMass",
      "baseParticleMass(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentParticleCharge(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): BigInt {
    let result = super.call(
      "currentParticleCharge",
      "currentParticleCharge(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_currentParticleCharge(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentParticleCharge",
      "currentParticleCharge(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentParticleKinetics(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): BigInt {
    let result = super.call(
      "currentParticleKinetics",
      "currentParticleKinetics(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_currentParticleKinetics(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentParticleKinetics",
      "currentParticleKinetics(address,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dischargeParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ChargedParticles__dischargeParticleResult {
    let result = super.call(
      "dischargeParticle",
      "dischargeParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return new ChargedParticles__dischargeParticleResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_dischargeParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ethereum.CallResult<ChargedParticles__dischargeParticleResult> {
    let result = super.tryCall(
      "dischargeParticle",
      "dischargeParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__dischargeParticleResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  dischargeParticleAmount(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ChargedParticles__dischargeParticleAmountResult {
    let result = super.call(
      "dischargeParticleAmount",
      "dischargeParticleAmount(address,address,uint256,string,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );

    return new ChargedParticles__dischargeParticleAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_dischargeParticleAmount(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ethereum.CallResult<ChargedParticles__dischargeParticleAmountResult> {
    let result = super.tryCall(
      "dischargeParticleAmount",
      "dischargeParticleAmount(address,address,uint256,string,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__dischargeParticleAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  energizeParticle(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): BigInt {
    let result = super.call(
      "energizeParticle",
      "energizeParticle(address,uint256,string,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_energizeParticle(
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address,
    assetAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "energizeParticle",
      "energizeParticle(address,uint256,string,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken),
        ethereum.Value.fromUnsignedBigInt(assetAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidityProviderByIndex(index: BigInt): string {
    let result = super.call(
      "getLiquidityProviderByIndex",
      "getLiquidityProviderByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toString();
  }

  try_getLiquidityProviderByIndex(index: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getLiquidityProviderByIndex",
      "getLiquidityProviderByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getLiquidityProvidersCount(): BigInt {
    let result = super.call(
      "getLiquidityProvidersCount",
      "getLiquidityProvidersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLiquidityProvidersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidityProvidersCount",
      "getLiquidityProvidersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnerUUID(liquidityProviderId: string, ownerAddress: Address): BigInt {
    let result = super.call(
      "getOwnerUUID",
      "getOwnerUUID(string,address):(uint256)",
      [
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(ownerAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOwnerUUID(
    liquidityProviderId: string,
    ownerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnerUUID",
      "getOwnerUUID(string,address):(uint256)",
      [
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(ownerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenUUID(contractAddress: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getTokenUUID",
      "getTokenUUID(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenUUID(
    contractAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenUUID",
      "getTokenUUID(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWalletManager(liquidityProviderId: string): Address {
    let result = super.call(
      "getWalletManager",
      "getWalletManager(string):(address)",
      [ethereum.Value.fromString(liquidityProviderId)]
    );

    return result[0].toAddress();
  }

  try_getWalletManager(
    liquidityProviderId: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletManager",
      "getWalletManager(string):(address)",
      [ethereum.Value.fromString(liquidityProviderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForDischarge(
    contractAddress: Address,
    tokenId: BigInt,
    operator: Address
  ): boolean {
    let result = super.call(
      "isApprovedForDischarge",
      "isApprovedForDischarge(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForDischarge(
    contractAddress: Address,
    tokenId: BigInt,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForDischarge",
      "isApprovedForDischarge(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForRelease(
    contractAddress: Address,
    tokenId: BigInt,
    operator: Address
  ): boolean {
    let result = super.call(
      "isApprovedForRelease",
      "isApprovedForRelease(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForRelease(
    contractAddress: Address,
    tokenId: BigInt,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForRelease",
      "isApprovedForRelease(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForTimelock(
    contractAddress: Address,
    tokenId: BigInt,
    operator: Address
  ): boolean {
    let result = super.call(
      "isApprovedForTimelock",
      "isApprovedForTimelock(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForTimelock(
    contractAddress: Address,
    tokenId: BigInt,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForTimelock",
      "isApprovedForTimelock(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isContractOwner(contractAddress: Address, account: Address): boolean {
    let result = super.call(
      "isContractOwner",
      "isContractOwner(address,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBoolean();
  }

  try_isContractOwner(
    contractAddress: Address,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isContractOwner",
      "isContractOwner(address,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidityProviderEnabled(liquidityProviderId: string): boolean {
    let result = super.call(
      "isLiquidityProviderEnabled",
      "isLiquidityProviderEnabled(string):(bool)",
      [ethereum.Value.fromString(liquidityProviderId)]
    );

    return result[0].toBoolean();
  }

  try_isLiquidityProviderEnabled(
    liquidityProviderId: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidityProviderEnabled",
      "isLiquidityProviderEnabled(string):(bool)",
      [ethereum.Value.fromString(liquidityProviderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTokenCreator(
    contractAddress: Address,
    tokenId: BigInt,
    account: Address
  ): boolean {
    let result = super.call(
      "isTokenCreator",
      "isTokenCreator(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTokenCreator(
    contractAddress: Address,
    tokenId: BigInt,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenCreator",
      "isTokenCreator(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  releaseParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ChargedParticles__releaseParticleResult {
    let result = super.call(
      "releaseParticle",
      "releaseParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );

    return new ChargedParticles__releaseParticleResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_releaseParticle(
    receiver: Address,
    contractAddress: Address,
    tokenId: BigInt,
    liquidityProviderId: string,
    assetToken: Address
  ): ethereum.CallResult<ChargedParticles__releaseParticleResult> {
    let result = super.tryCall(
      "releaseParticle",
      "releaseParticle(address,address,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(liquidityProviderId),
        ethereum.Value.fromAddress(assetToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChargedParticles__releaseParticleResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  whitelisted(param0: Address): boolean {
    let result = super.call("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BaseParticleMassCall extends ethereum.Call {
  get inputs(): BaseParticleMassCall__Inputs {
    return new BaseParticleMassCall__Inputs(this);
  }

  get outputs(): BaseParticleMassCall__Outputs {
    return new BaseParticleMassCall__Outputs(this);
  }
}

export class BaseParticleMassCall__Inputs {
  _call: BaseParticleMassCall;

  constructor(call: BaseParticleMassCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BaseParticleMassCall__Outputs {
  _call: BaseParticleMassCall;

  constructor(call: BaseParticleMassCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CurrentParticleChargeCall extends ethereum.Call {
  get inputs(): CurrentParticleChargeCall__Inputs {
    return new CurrentParticleChargeCall__Inputs(this);
  }

  get outputs(): CurrentParticleChargeCall__Outputs {
    return new CurrentParticleChargeCall__Outputs(this);
  }
}

export class CurrentParticleChargeCall__Inputs {
  _call: CurrentParticleChargeCall;

  constructor(call: CurrentParticleChargeCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CurrentParticleChargeCall__Outputs {
  _call: CurrentParticleChargeCall;

  constructor(call: CurrentParticleChargeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CurrentParticleKineticsCall extends ethereum.Call {
  get inputs(): CurrentParticleKineticsCall__Inputs {
    return new CurrentParticleKineticsCall__Inputs(this);
  }

  get outputs(): CurrentParticleKineticsCall__Outputs {
    return new CurrentParticleKineticsCall__Outputs(this);
  }
}

export class CurrentParticleKineticsCall__Inputs {
  _call: CurrentParticleKineticsCall;

  constructor(call: CurrentParticleKineticsCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CurrentParticleKineticsCall__Outputs {
  _call: CurrentParticleKineticsCall;

  constructor(call: CurrentParticleKineticsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DischargeParticleCall extends ethereum.Call {
  get inputs(): DischargeParticleCall__Inputs {
    return new DischargeParticleCall__Inputs(this);
  }

  get outputs(): DischargeParticleCall__Outputs {
    return new DischargeParticleCall__Outputs(this);
  }
}

export class DischargeParticleCall__Inputs {
  _call: DischargeParticleCall;

  constructor(call: DischargeParticleCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class DischargeParticleCall__Outputs {
  _call: DischargeParticleCall;

  constructor(call: DischargeParticleCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DischargeParticleAmountCall extends ethereum.Call {
  get inputs(): DischargeParticleAmountCall__Inputs {
    return new DischargeParticleAmountCall__Inputs(this);
  }

  get outputs(): DischargeParticleAmountCall__Outputs {
    return new DischargeParticleAmountCall__Outputs(this);
  }
}

export class DischargeParticleAmountCall__Inputs {
  _call: DischargeParticleAmountCall;

  constructor(call: DischargeParticleAmountCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class DischargeParticleAmountCall__Outputs {
  _call: DischargeParticleAmountCall;

  constructor(call: DischargeParticleAmountCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class EnergizeParticleCall extends ethereum.Call {
  get inputs(): EnergizeParticleCall__Inputs {
    return new EnergizeParticleCall__Inputs(this);
  }

  get outputs(): EnergizeParticleCall__Outputs {
    return new EnergizeParticleCall__Outputs(this);
  }
}

export class EnergizeParticleCall__Inputs {
  _call: EnergizeParticleCall;

  constructor(call: EnergizeParticleCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class EnergizeParticleCall__Outputs {
  _call: EnergizeParticleCall;

  constructor(call: EnergizeParticleCall) {
    this._call = call;
  }

  get yieldTokensAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RegisterLiquidityProviderCall extends ethereum.Call {
  get inputs(): RegisterLiquidityProviderCall__Inputs {
    return new RegisterLiquidityProviderCall__Inputs(this);
  }

  get outputs(): RegisterLiquidityProviderCall__Outputs {
    return new RegisterLiquidityProviderCall__Outputs(this);
  }
}

export class RegisterLiquidityProviderCall__Inputs {
  _call: RegisterLiquidityProviderCall;

  constructor(call: RegisterLiquidityProviderCall) {
    this._call = call;
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get walletManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterLiquidityProviderCall__Outputs {
  _call: RegisterLiquidityProviderCall;

  constructor(call: RegisterLiquidityProviderCall) {
    this._call = call;
  }
}

export class ReleaseParticleCall extends ethereum.Call {
  get inputs(): ReleaseParticleCall__Inputs {
    return new ReleaseParticleCall__Inputs(this);
  }

  get outputs(): ReleaseParticleCall__Outputs {
    return new ReleaseParticleCall__Outputs(this);
  }
}

export class ReleaseParticleCall__Inputs {
  _call: ReleaseParticleCall;

  constructor(call: ReleaseParticleCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidityProviderId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get assetToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ReleaseParticleCall__Outputs {
  _call: ReleaseParticleCall;

  constructor(call: ReleaseParticleCall) {
    this._call = call;
  }

  get creatorAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get receiverAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCreatorConfigsCall extends ethereum.Call {
  get inputs(): SetCreatorConfigsCall__Inputs {
    return new SetCreatorConfigsCall__Inputs(this);
  }

  get outputs(): SetCreatorConfigsCall__Outputs {
    return new SetCreatorConfigsCall__Outputs(this);
  }
}

export class SetCreatorConfigsCall__Inputs {
  _call: SetCreatorConfigsCall;

  constructor(call: SetCreatorConfigsCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get creator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get annuityPercent(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetCreatorConfigsCall__Outputs {
  _call: SetCreatorConfigsCall;

  constructor(call: SetCreatorConfigsCall) {
    this._call = call;
  }
}

export class SetDischargeApprovalCall extends ethereum.Call {
  get inputs(): SetDischargeApprovalCall__Inputs {
    return new SetDischargeApprovalCall__Inputs(this);
  }

  get outputs(): SetDischargeApprovalCall__Outputs {
    return new SetDischargeApprovalCall__Outputs(this);
  }
}

export class SetDischargeApprovalCall__Inputs {
  _call: SetDischargeApprovalCall;

  constructor(call: SetDischargeApprovalCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetDischargeApprovalCall__Outputs {
  _call: SetDischargeApprovalCall;

  constructor(call: SetDischargeApprovalCall) {
    this._call = call;
  }
}

export class SetDischargeTimelockCall extends ethereum.Call {
  get inputs(): SetDischargeTimelockCall__Inputs {
    return new SetDischargeTimelockCall__Inputs(this);
  }

  get outputs(): SetDischargeTimelockCall__Outputs {
    return new SetDischargeTimelockCall__Outputs(this);
  }
}

export class SetDischargeTimelockCall__Inputs {
  _call: SetDischargeTimelockCall;

  constructor(call: SetDischargeTimelockCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unlockBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDischargeTimelockCall__Outputs {
  _call: SetDischargeTimelockCall;

  constructor(call: SetDischargeTimelockCall) {
    this._call = call;
  }
}

export class SetExternalContractConfigsCall extends ethereum.Call {
  get inputs(): SetExternalContractConfigsCall__Inputs {
    return new SetExternalContractConfigsCall__Inputs(this);
  }

  get outputs(): SetExternalContractConfigsCall__Outputs {
    return new SetExternalContractConfigsCall__Outputs(this);
  }
}

export class SetExternalContractConfigsCall__Inputs {
  _call: SetExternalContractConfigsCall;

  constructor(call: SetExternalContractConfigsCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidityProvider(): string {
    return this._call.inputValues[1].value.toString();
  }

  get assetDepositMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get assetDepositMax(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetExternalContractConfigsCall__Outputs {
  _call: SetExternalContractConfigsCall;

  constructor(call: SetExternalContractConfigsCall) {
    this._call = call;
  }
}

export class SetReleaseApprovalCall extends ethereum.Call {
  get inputs(): SetReleaseApprovalCall__Inputs {
    return new SetReleaseApprovalCall__Inputs(this);
  }

  get outputs(): SetReleaseApprovalCall__Outputs {
    return new SetReleaseApprovalCall__Outputs(this);
  }
}

export class SetReleaseApprovalCall__Inputs {
  _call: SetReleaseApprovalCall;

  constructor(call: SetReleaseApprovalCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetReleaseApprovalCall__Outputs {
  _call: SetReleaseApprovalCall;

  constructor(call: SetReleaseApprovalCall) {
    this._call = call;
  }
}

export class SetReleaseTimelockCall extends ethereum.Call {
  get inputs(): SetReleaseTimelockCall__Inputs {
    return new SetReleaseTimelockCall__Inputs(this);
  }

  get outputs(): SetReleaseTimelockCall__Outputs {
    return new SetReleaseTimelockCall__Outputs(this);
  }
}

export class SetReleaseTimelockCall__Inputs {
  _call: SetReleaseTimelockCall;

  constructor(call: SetReleaseTimelockCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unlockBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetReleaseTimelockCall__Outputs {
  _call: SetReleaseTimelockCall;

  constructor(call: SetReleaseTimelockCall) {
    this._call = call;
  }
}

export class SetTimelockApprovalCall extends ethereum.Call {
  get inputs(): SetTimelockApprovalCall__Inputs {
    return new SetTimelockApprovalCall__Inputs(this);
  }

  get outputs(): SetTimelockApprovalCall__Outputs {
    return new SetTimelockApprovalCall__Outputs(this);
  }
}

export class SetTimelockApprovalCall__Inputs {
  _call: SetTimelockApprovalCall;

  constructor(call: SetTimelockApprovalCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetTimelockApprovalCall__Outputs {
  _call: SetTimelockApprovalCall;

  constructor(call: SetTimelockApprovalCall) {
    this._call = call;
  }
}

export class SetUniverseCall extends ethereum.Call {
  get inputs(): SetUniverseCall__Inputs {
    return new SetUniverseCall__Inputs(this);
  }

  get outputs(): SetUniverseCall__Outputs {
    return new SetUniverseCall__Outputs(this);
  }
}

export class SetUniverseCall__Inputs {
  _call: SetUniverseCall;

  constructor(call: SetUniverseCall) {
    this._call = call;
  }

  get universe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUniverseCall__Outputs {
  _call: SetUniverseCall;

  constructor(call: SetUniverseCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateWhitelistCall extends ethereum.Call {
  get inputs(): UpdateWhitelistCall__Inputs {
    return new UpdateWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistCall__Outputs {
    return new UpdateWhitelistCall__Outputs(this);
  }
}

export class UpdateWhitelistCall__Inputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateWhitelistCall__Outputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }
}
