// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PhotonTransferred extends ethereum.Event {
  get params(): PhotonTransferred__Params {
    return new PhotonTransferred__Params(this);
  }
}

export class PhotonTransferred__Params {
  _event: PhotonTransferred;

  constructor(event: PhotonTransferred) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPhoton(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get photonURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PhotonUpdated extends ethereum.Event {
  get params(): PhotonUpdated__Params {
    return new PhotonUpdated__Params(this);
  }
}

export class PhotonUpdated__Params {
  _event: PhotonUpdated;

  constructor(event: PhotonUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get photonURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Photon extends ethereum.SmartContract {
  static bind(address: Address): Photon {
    return new Photon("Photon", address);
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  photonURI(photon: Address): string {
    let result = super.call("photonURI", "photonURI(address):(string)", [
      ethereum.Value.fromAddress(photon)
    ]);

    return result[0].toString();
  }

  try_photonURI(photon: Address): ethereum.CallResult<string> {
    let result = super.tryCall("photonURI", "photonURI(address):(string)", [
      ethereum.Value.fromAddress(photon)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetPhotonURICall extends ethereum.Call {
  get inputs(): SetPhotonURICall__Inputs {
    return new SetPhotonURICall__Inputs(this);
  }

  get outputs(): SetPhotonURICall__Outputs {
    return new SetPhotonURICall__Outputs(this);
  }
}

export class SetPhotonURICall__Inputs {
  _call: SetPhotonURICall;

  constructor(call: SetPhotonURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetPhotonURICall__Outputs {
  _call: SetPhotonURICall;

  constructor(call: SetPhotonURICall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}
