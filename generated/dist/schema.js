"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.StakedDeposits = exports.StakedPools = exports.Staking = exports.PlatformMetric = exports.UserTokenMetric = exports.ProfileMetric = exports.NftAnalytic = exports.AssetTokenAnalytic = exports.ApprovedOperator = exports.UserRoyalty = exports.NftTxCount = exports.NftTxHistory = exports.LeptonNFT = exports.LeptonClassification = exports.Lepton2 = exports.Lepton = exports.StandardNftAttributes = exports.StandardNFT = exports.ProtonNftAttributes = exports.ProtonNftCount = exports.ProtonNFT = exports.Proton = exports.ESALevel = exports.ESAMultiplier = exports.IonxHolder = exports.Ionx = exports.WBoson = exports.AaveAssetTokenBalance = exports.AaveSmartWallet = exports.AaveWalletManager = exports.GenericAssetTokenBalance = exports.GenericSmartWallet = exports.GenericWalletManager = exports.GenericNftTokenBalance = exports.GenericSmartBasket = exports.GenericBasketManager = exports.NftState = exports.ChargedState = exports.NftCreatorSettings = exports.MaxNfts = exports.DepositCap = exports.AllowedAssetToken = exports.NftSettings = exports.ChargedSettings = exports.ChargedManagers = exports.ChargedParticles = exports.Universe = exports.GlobalData = void 0;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var GlobalData = /** @class */ (function (_super) {
    __extends(GlobalData, _super);
    function GlobalData(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    GlobalData.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GlobalData entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GlobalData entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GlobalData", id.toString(), this);
        }
    };
    GlobalData.load = function (id) {
        return changetype(graph_ts_1.store.get("GlobalData", id));
    };
    Object.defineProperty(GlobalData.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalData.prototype, "chargedParticlesAddress", {
        get: function () {
            var value = this.get("chargedParticlesAddress");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedParticlesAddress");
            }
            else {
                this.set("chargedParticlesAddress", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return GlobalData;
}(graph_ts_1.Entity));
exports.GlobalData = GlobalData;
var Universe = /** @class */ (function (_super) {
    __extends(Universe, _super);
    function Universe(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    Universe.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Universe entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Universe entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Universe", id.toString(), this);
        }
    };
    Universe.load = function (id) {
        return changetype(graph_ts_1.store.get("Universe", id));
    };
    Object.defineProperty(Universe.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "chargedParticles", {
        get: function () {
            var value = this.get("chargedParticles");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedParticles");
            }
            else {
                this.set("chargedParticles", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "ionxToken", {
        get: function () {
            var value = this.get("ionxToken");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("ionxToken");
            }
            else {
                this.set("ionxToken", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "ionxMaxSupply", {
        get: function () {
            var value = this.get("ionxMaxSupply");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("ionxMaxSupply");
            }
            else {
                this.set("ionxMaxSupply", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "protonToken", {
        get: function () {
            var value = this.get("protonToken");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("protonToken");
            }
            else {
                this.set("protonToken", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "leptonToken", {
        get: function () {
            var value = this.get("leptonToken");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("leptonToken");
            }
            else {
                this.set("leptonToken", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "esaMultiplier", {
        get: function () {
            var value = this.get("esaMultiplier");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("esaMultiplier", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Universe.prototype, "esaLevel", {
        get: function () {
            var value = this.get("esaLevel");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("esaLevel", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Universe;
}(graph_ts_1.Entity));
exports.Universe = Universe;
var ChargedParticles = /** @class */ (function (_super) {
    __extends(ChargedParticles, _super);
    function ChargedParticles(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    ChargedParticles.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ChargedParticles entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ChargedParticles entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ChargedParticles", id.toString(), this);
        }
    };
    ChargedParticles.load = function (id) {
        return changetype(graph_ts_1.store.get("ChargedParticles", id));
    };
    Object.defineProperty(ChargedParticles.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "depositFee", {
        get: function () {
            var value = this.get("depositFee");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("depositFee");
            }
            else {
                this.set("depositFee", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "universe", {
        get: function () {
            var value = this.get("universe");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("universe");
            }
            else {
                this.set("universe", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "chargedSettings", {
        get: function () {
            var value = this.get("chargedSettings");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedSettings");
            }
            else {
                this.set("chargedSettings", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "chargedState", {
        get: function () {
            var value = this.get("chargedState");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedState");
            }
            else {
                this.set("chargedState", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "chargedManagers", {
        get: function () {
            var value = this.get("chargedManagers");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedManagers");
            }
            else {
                this.set("chargedManagers", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "leptonToken", {
        get: function () {
            var value = this.get("leptonToken");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("leptonToken");
            }
            else {
                this.set("leptonToken", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "tokenInfoProxy", {
        get: function () {
            var value = this.get("tokenInfoProxy");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("tokenInfoProxy");
            }
            else {
                this.set("tokenInfoProxy", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedParticles.prototype, "trustedForwarder", {
        get: function () {
            var value = this.get("trustedForwarder");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("trustedForwarder");
            }
            else {
                this.set("trustedForwarder", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return ChargedParticles;
}(graph_ts_1.Entity));
exports.ChargedParticles = ChargedParticles;
var ChargedManagers = /** @class */ (function (_super) {
    __extends(ChargedManagers, _super);
    function ChargedManagers(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    ChargedManagers.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ChargedManagers entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ChargedManagers entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ChargedManagers", id.toString(), this);
        }
    };
    ChargedManagers.load = function (id) {
        return changetype(graph_ts_1.store.get("ChargedManagers", id));
    };
    Object.defineProperty(ChargedManagers.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedManagers.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedManagers.prototype, "genericBasketManagers", {
        get: function () {
            var value = this.get("genericBasketManagers");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("genericBasketManagers");
            }
            else {
                this.set("genericBasketManagers", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedManagers.prototype, "genericWalletManagers", {
        get: function () {
            var value = this.get("genericWalletManagers");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("genericWalletManagers");
            }
            else {
                this.set("genericWalletManagers", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedManagers.prototype, "aaveWalletManagers", {
        get: function () {
            var value = this.get("aaveWalletManagers");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toStringArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("aaveWalletManagers");
            }
            else {
                this.set("aaveWalletManagers", graph_ts_1.Value.fromStringArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return ChargedManagers;
}(graph_ts_1.Entity));
exports.ChargedManagers = ChargedManagers;
var ChargedSettings = /** @class */ (function (_super) {
    __extends(ChargedSettings, _super);
    function ChargedSettings(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    ChargedSettings.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ChargedSettings entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ChargedSettings entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ChargedSettings", id.toString(), this);
        }
    };
    ChargedSettings.load = function (id) {
        return changetype(graph_ts_1.store.get("ChargedSettings", id));
    };
    Object.defineProperty(ChargedSettings.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedSettings.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedSettings.prototype, "depositCaps", {
        get: function () {
            var value = this.get("depositCaps");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("depositCaps", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedSettings.prototype, "tempLockExpiryBlocks", {
        get: function () {
            var value = this.get("tempLockExpiryBlocks");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("tempLockExpiryBlocks");
            }
            else {
                this.set("tempLockExpiryBlocks", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedSettings.prototype, "nftSettings", {
        get: function () {
            var value = this.get("nftSettings");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("nftSettings", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedSettings.prototype, "nftCreatorSettings", {
        get: function () {
            var value = this.get("nftCreatorSettings");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("nftCreatorSettings", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return ChargedSettings;
}(graph_ts_1.Entity));
exports.ChargedSettings = ChargedSettings;
var NftSettings = /** @class */ (function (_super) {
    __extends(NftSettings, _super);
    function NftSettings(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("chargedSettings", graph_ts_1.Value.fromString(""));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    NftSettings.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save NftSettings entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NftSettings entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("NftSettings", id.toString(), this);
        }
    };
    NftSettings.load = function (id) {
        return changetype(graph_ts_1.store.get("NftSettings", id));
    };
    Object.defineProperty(NftSettings.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "chargedSettings", {
        get: function () {
            var value = this.get("chargedSettings");
            return value.toString();
        },
        set: function (value) {
            this.set("chargedSettings", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "requiredWalletManager", {
        get: function () {
            var value = this.get("requiredWalletManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("requiredWalletManager");
            }
            else {
                this.set("requiredWalletManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "requiredBasketManager", {
        get: function () {
            var value = this.get("requiredBasketManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("requiredBasketManager");
            }
            else {
                this.set("requiredBasketManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "allowedAssetTokens", {
        get: function () {
            var value = this.get("allowedAssetTokens");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("allowedAssetTokens", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "assetDepositMin", {
        get: function () {
            var value = this.get("assetDepositMin");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("assetDepositMin");
            }
            else {
                this.set("assetDepositMin", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "assetDepositMax", {
        get: function () {
            var value = this.get("assetDepositMax");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("assetDepositMax");
            }
            else {
                this.set("assetDepositMax", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "maxNfts", {
        get: function () {
            var value = this.get("maxNfts");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("maxNfts", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "allowCharge", {
        get: function () {
            var value = this.get("allowCharge");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowCharge", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "allowBond", {
        get: function () {
            var value = this.get("allowBond");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowBond", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "allowTimelockAnyNft", {
        get: function () {
            var value = this.get("allowTimelockAnyNft");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowTimelockAnyNft", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "allowTimelockOwnNft", {
        get: function () {
            var value = this.get("allowTimelockOwnNft");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowTimelockOwnNft", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftSettings.prototype, "hasRestrictedAssets", {
        get: function () {
            var value = this.get("hasRestrictedAssets");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("hasRestrictedAssets", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    return NftSettings;
}(graph_ts_1.Entity));
exports.NftSettings = NftSettings;
var AllowedAssetToken = /** @class */ (function (_super) {
    __extends(AllowedAssetToken, _super);
    function AllowedAssetToken(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("nftSettings", graph_ts_1.Value.fromString(""));
        return _this;
    }
    AllowedAssetToken.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save AllowedAssetToken entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save AllowedAssetToken entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("AllowedAssetToken", id.toString(), this);
        }
    };
    AllowedAssetToken.load = function (id) {
        return changetype(graph_ts_1.store.get("AllowedAssetToken", id));
    };
    Object.defineProperty(AllowedAssetToken.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AllowedAssetToken.prototype, "nftSettings", {
        get: function () {
            var value = this.get("nftSettings");
            return value.toString();
        },
        set: function (value) {
            this.set("nftSettings", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AllowedAssetToken.prototype, "assetToken", {
        get: function () {
            var value = this.get("assetToken");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("assetToken");
            }
            else {
                this.set("assetToken", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AllowedAssetToken.prototype, "isAllowed", {
        get: function () {
            var value = this.get("isAllowed");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("isAllowed", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    return AllowedAssetToken;
}(graph_ts_1.Entity));
exports.AllowedAssetToken = AllowedAssetToken;
var DepositCap = /** @class */ (function (_super) {
    __extends(DepositCap, _super);
    function DepositCap(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("chargedSettings", graph_ts_1.Value.fromString(""));
        return _this;
    }
    DepositCap.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save DepositCap entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save DepositCap entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("DepositCap", id.toString(), this);
        }
    };
    DepositCap.load = function (id) {
        return changetype(graph_ts_1.store.get("DepositCap", id));
    };
    Object.defineProperty(DepositCap.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DepositCap.prototype, "chargedSettings", {
        get: function () {
            var value = this.get("chargedSettings");
            return value.toString();
        },
        set: function (value) {
            this.set("chargedSettings", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DepositCap.prototype, "assetToken", {
        get: function () {
            var value = this.get("assetToken");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("assetToken");
            }
            else {
                this.set("assetToken", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DepositCap.prototype, "maxDeposit", {
        get: function () {
            var value = this.get("maxDeposit");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("maxDeposit");
            }
            else {
                this.set("maxDeposit", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return DepositCap;
}(graph_ts_1.Entity));
exports.DepositCap = DepositCap;
var MaxNfts = /** @class */ (function (_super) {
    __extends(MaxNfts, _super);
    function MaxNfts(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("nftSettings", graph_ts_1.Value.fromString(""));
        return _this;
    }
    MaxNfts.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save MaxNfts entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save MaxNfts entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("MaxNfts", id.toString(), this);
        }
    };
    MaxNfts.load = function (id) {
        return changetype(graph_ts_1.store.get("MaxNfts", id));
    };
    Object.defineProperty(MaxNfts.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MaxNfts.prototype, "nftSettings", {
        get: function () {
            var value = this.get("nftSettings");
            return value.toString();
        },
        set: function (value) {
            this.set("nftSettings", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MaxNfts.prototype, "tokenAddress", {
        get: function () {
            var value = this.get("tokenAddress");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("tokenAddress");
            }
            else {
                this.set("tokenAddress", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MaxNfts.prototype, "maxNfts", {
        get: function () {
            var value = this.get("maxNfts");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("maxNfts");
            }
            else {
                this.set("maxNfts", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return MaxNfts;
}(graph_ts_1.Entity));
exports.MaxNfts = MaxNfts;
var NftCreatorSettings = /** @class */ (function (_super) {
    __extends(NftCreatorSettings, _super);
    function NftCreatorSettings(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("chargedSettings", graph_ts_1.Value.fromString(""));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("creatorAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    NftCreatorSettings.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save NftCreatorSettings entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NftCreatorSettings entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("NftCreatorSettings", id.toString(), this);
        }
    };
    NftCreatorSettings.load = function (id) {
        return changetype(graph_ts_1.store.get("NftCreatorSettings", id));
    };
    Object.defineProperty(NftCreatorSettings.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftCreatorSettings.prototype, "chargedSettings", {
        get: function () {
            var value = this.get("chargedSettings");
            return value.toString();
        },
        set: function (value) {
            this.set("chargedSettings", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftCreatorSettings.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftCreatorSettings.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftCreatorSettings.prototype, "creatorAddress", {
        get: function () {
            var value = this.get("creatorAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("creatorAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftCreatorSettings.prototype, "annuityPercent", {
        get: function () {
            var value = this.get("annuityPercent");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("annuityPercent");
            }
            else {
                this.set("annuityPercent", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftCreatorSettings.prototype, "annuityRedirect", {
        get: function () {
            var value = this.get("annuityRedirect");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("annuityRedirect");
            }
            else {
                this.set("annuityRedirect", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return NftCreatorSettings;
}(graph_ts_1.Entity));
exports.NftCreatorSettings = NftCreatorSettings;
var ChargedState = /** @class */ (function (_super) {
    __extends(ChargedState, _super);
    function ChargedState(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    ChargedState.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ChargedState entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ChargedState entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ChargedState", id.toString(), this);
        }
    };
    ChargedState.load = function (id) {
        return changetype(graph_ts_1.store.get("ChargedState", id));
    };
    Object.defineProperty(ChargedState.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedState.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChargedState.prototype, "nftState", {
        get: function () {
            var value = this.get("nftState");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("nftState", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return ChargedState;
}(graph_ts_1.Entity));
exports.ChargedState = ChargedState;
var NftState = /** @class */ (function (_super) {
    __extends(NftState, _super);
    function NftState(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("chargedState", graph_ts_1.Value.fromString(""));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    NftState.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save NftState entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NftState entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("NftState", id.toString(), this);
        }
    };
    NftState.load = function (id) {
        return changetype(graph_ts_1.store.get("NftState", id));
    };
    Object.defineProperty(NftState.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "chargedState", {
        get: function () {
            var value = this.get("chargedState");
            return value.toString();
        },
        set: function (value) {
            this.set("chargedState", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "lastKnownOwner", {
        get: function () {
            var value = this.get("lastKnownOwner");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("lastKnownOwner");
            }
            else {
                this.set("lastKnownOwner", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "dischargeApproval", {
        get: function () {
            var value = this.get("dischargeApproval");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("dischargeApproval");
            }
            else {
                this.set("dischargeApproval", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "releaseApproval", {
        get: function () {
            var value = this.get("releaseApproval");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("releaseApproval");
            }
            else {
                this.set("releaseApproval", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "breakBondApproval", {
        get: function () {
            var value = this.get("breakBondApproval");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("breakBondApproval");
            }
            else {
                this.set("breakBondApproval", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "timelockApproval", {
        get: function () {
            var value = this.get("timelockApproval");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("timelockApproval");
            }
            else {
                this.set("timelockApproval", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "dischargeTimelockExpiry", {
        get: function () {
            var value = this.get("dischargeTimelockExpiry");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("dischargeTimelockExpiry");
            }
            else {
                this.set("dischargeTimelockExpiry", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "dischargeTimelockLockedBy", {
        get: function () {
            var value = this.get("dischargeTimelockLockedBy");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("dischargeTimelockLockedBy");
            }
            else {
                this.set("dischargeTimelockLockedBy", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "releaseTimelockExpiry", {
        get: function () {
            var value = this.get("releaseTimelockExpiry");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("releaseTimelockExpiry");
            }
            else {
                this.set("releaseTimelockExpiry", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "releaseTimelockLockedBy", {
        get: function () {
            var value = this.get("releaseTimelockLockedBy");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("releaseTimelockLockedBy");
            }
            else {
                this.set("releaseTimelockLockedBy", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "breakBondTimelockExpiry", {
        get: function () {
            var value = this.get("breakBondTimelockExpiry");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("breakBondTimelockExpiry");
            }
            else {
                this.set("breakBondTimelockExpiry", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "breakBondTimelockLockedBy", {
        get: function () {
            var value = this.get("breakBondTimelockLockedBy");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("breakBondTimelockLockedBy");
            }
            else {
                this.set("breakBondTimelockLockedBy", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "tempLockExpiry", {
        get: function () {
            var value = this.get("tempLockExpiry");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("tempLockExpiry");
            }
            else {
                this.set("tempLockExpiry", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "restrictChargeFromAny", {
        get: function () {
            var value = this.get("restrictChargeFromAny");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("restrictChargeFromAny", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "allowDischargeFromAny", {
        get: function () {
            var value = this.get("allowDischargeFromAny");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowDischargeFromAny", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "allowReleaseFromAny", {
        get: function () {
            var value = this.get("allowReleaseFromAny");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowReleaseFromAny", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "restrictBondFromAny", {
        get: function () {
            var value = this.get("restrictBondFromAny");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("restrictBondFromAny", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftState.prototype, "allowBreakBondFromAny", {
        get: function () {
            var value = this.get("allowBreakBondFromAny");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("allowBreakBondFromAny", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    return NftState;
}(graph_ts_1.Entity));
exports.NftState = NftState;
var GenericBasketManager = /** @class */ (function (_super) {
    __extends(GenericBasketManager, _super);
    function GenericBasketManager(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("name", graph_ts_1.Value.fromString(""));
        _this.set("address", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    GenericBasketManager.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GenericBasketManager entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GenericBasketManager entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GenericBasketManager", id.toString(), this);
        }
    };
    GenericBasketManager.load = function (id) {
        return changetype(graph_ts_1.store.get("GenericBasketManager", id));
    };
    Object.defineProperty(GenericBasketManager.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "name", {
        get: function () {
            var value = this.get("name");
            return value.toString();
        },
        set: function (value) {
            this.set("name", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "address", {
        get: function () {
            var value = this.get("address");
            return value.toBytes();
        },
        set: function (value) {
            this.set("address", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "paused", {
        get: function () {
            var value = this.get("paused");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("paused", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "chargedManager", {
        get: function () {
            var value = this.get("chargedManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedManager");
            }
            else {
                this.set("chargedManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "chargedParticles", {
        get: function () {
            var value = this.get("chargedParticles");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedParticles");
            }
            else {
                this.set("chargedParticles", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "executor", {
        get: function () {
            var value = this.get("executor");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("executor");
            }
            else {
                this.set("executor", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericBasketManager.prototype, "baskets", {
        get: function () {
            var value = this.get("baskets");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("baskets", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return GenericBasketManager;
}(graph_ts_1.Entity));
exports.GenericBasketManager = GenericBasketManager;
var GenericSmartBasket = /** @class */ (function (_super) {
    __extends(GenericSmartBasket, _super);
    function GenericSmartBasket(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalTokens", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    GenericSmartBasket.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GenericSmartBasket entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GenericSmartBasket entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GenericSmartBasket", id.toString(), this);
        }
    };
    GenericSmartBasket.load = function (id) {
        return changetype(graph_ts_1.store.get("GenericSmartBasket", id));
    };
    Object.defineProperty(GenericSmartBasket.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "address", {
        get: function () {
            var value = this.get("address");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("address");
            }
            else {
                this.set("address", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "basketManager", {
        get: function () {
            var value = this.get("basketManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("basketManager");
            }
            else {
                this.set("basketManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "managerId", {
        get: function () {
            var value = this.get("managerId");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("managerId");
            }
            else {
                this.set("managerId", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "totalTokens", {
        get: function () {
            var value = this.get("totalTokens");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalTokens", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartBasket.prototype, "tokenBalances", {
        get: function () {
            var value = this.get("tokenBalances");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("tokenBalances", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return GenericSmartBasket;
}(graph_ts_1.Entity));
exports.GenericSmartBasket = GenericSmartBasket;
var GenericNftTokenBalance = /** @class */ (function (_super) {
    __extends(GenericNftTokenBalance, _super);
    function GenericNftTokenBalance(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("nftTokenAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    GenericNftTokenBalance.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GenericNftTokenBalance entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GenericNftTokenBalance entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GenericNftTokenBalance", id.toString(), this);
        }
    };
    GenericNftTokenBalance.load = function (id) {
        return changetype(graph_ts_1.store.get("GenericNftTokenBalance", id));
    };
    Object.defineProperty(GenericNftTokenBalance.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericNftTokenBalance.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericNftTokenBalance.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericNftTokenBalance.prototype, "nftTokenAddress", {
        get: function () {
            var value = this.get("nftTokenAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("nftTokenAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericNftTokenBalance.prototype, "smartBasket", {
        get: function () {
            var value = this.get("smartBasket");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("smartBasket");
            }
            else {
                this.set("smartBasket", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericNftTokenBalance.prototype, "nftTokenIds", {
        get: function () {
            var value = this.get("nftTokenIds");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigIntArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("nftTokenIds");
            }
            else {
                this.set("nftTokenIds", graph_ts_1.Value.fromBigIntArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return GenericNftTokenBalance;
}(graph_ts_1.Entity));
exports.GenericNftTokenBalance = GenericNftTokenBalance;
var GenericWalletManager = /** @class */ (function (_super) {
    __extends(GenericWalletManager, _super);
    function GenericWalletManager(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("name", graph_ts_1.Value.fromString(""));
        _this.set("address", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    GenericWalletManager.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GenericWalletManager entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GenericWalletManager entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GenericWalletManager", id.toString(), this);
        }
    };
    GenericWalletManager.load = function (id) {
        return changetype(graph_ts_1.store.get("GenericWalletManager", id));
    };
    Object.defineProperty(GenericWalletManager.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "name", {
        get: function () {
            var value = this.get("name");
            return value.toString();
        },
        set: function (value) {
            this.set("name", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "address", {
        get: function () {
            var value = this.get("address");
            return value.toBytes();
        },
        set: function (value) {
            this.set("address", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "paused", {
        get: function () {
            var value = this.get("paused");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("paused", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "chargedManager", {
        get: function () {
            var value = this.get("chargedManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedManager");
            }
            else {
                this.set("chargedManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "chargedParticles", {
        get: function () {
            var value = this.get("chargedParticles");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedParticles");
            }
            else {
                this.set("chargedParticles", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "executor", {
        get: function () {
            var value = this.get("executor");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("executor");
            }
            else {
                this.set("executor", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericWalletManager.prototype, "wallets", {
        get: function () {
            var value = this.get("wallets");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("wallets", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return GenericWalletManager;
}(graph_ts_1.Entity));
exports.GenericWalletManager = GenericWalletManager;
var GenericSmartWallet = /** @class */ (function (_super) {
    __extends(GenericSmartWallet, _super);
    function GenericSmartWallet(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    GenericSmartWallet.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GenericSmartWallet entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GenericSmartWallet entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GenericSmartWallet", id.toString(), this);
        }
    };
    GenericSmartWallet.load = function (id) {
        return changetype(graph_ts_1.store.get("GenericSmartWallet", id));
    };
    Object.defineProperty(GenericSmartWallet.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "address", {
        get: function () {
            var value = this.get("address");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("address");
            }
            else {
                this.set("address", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "walletManager", {
        get: function () {
            var value = this.get("walletManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("walletManager");
            }
            else {
                this.set("walletManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "managerId", {
        get: function () {
            var value = this.get("managerId");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("managerId");
            }
            else {
                this.set("managerId", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "assetTokens", {
        get: function () {
            var value = this.get("assetTokens");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytesArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("assetTokens");
            }
            else {
                this.set("assetTokens", graph_ts_1.Value.fromBytesArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericSmartWallet.prototype, "assetBalances", {
        get: function () {
            var value = this.get("assetBalances");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("assetBalances", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return GenericSmartWallet;
}(graph_ts_1.Entity));
exports.GenericSmartWallet = GenericSmartWallet;
var GenericAssetTokenBalance = /** @class */ (function (_super) {
    __extends(GenericAssetTokenBalance, _super);
    function GenericAssetTokenBalance(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("assetToken", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("name", graph_ts_1.Value.fromString(""));
        _this.set("symbol", graph_ts_1.Value.fromString(""));
        _this.set("decimals", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("principal", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    GenericAssetTokenBalance.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save GenericAssetTokenBalance entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save GenericAssetTokenBalance entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("GenericAssetTokenBalance", id.toString(), this);
        }
    };
    GenericAssetTokenBalance.load = function (id) {
        return changetype(graph_ts_1.store.get("GenericAssetTokenBalance", id));
    };
    Object.defineProperty(GenericAssetTokenBalance.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "smartWallet", {
        get: function () {
            var value = this.get("smartWallet");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("smartWallet");
            }
            else {
                this.set("smartWallet", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "assetToken", {
        get: function () {
            var value = this.get("assetToken");
            return value.toBytes();
        },
        set: function (value) {
            this.set("assetToken", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "name", {
        get: function () {
            var value = this.get("name");
            return value.toString();
        },
        set: function (value) {
            this.set("name", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "symbol", {
        get: function () {
            var value = this.get("symbol");
            return value.toString();
        },
        set: function (value) {
            this.set("symbol", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "decimals", {
        get: function () {
            var value = this.get("decimals");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("decimals", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GenericAssetTokenBalance.prototype, "principal", {
        get: function () {
            var value = this.get("principal");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("principal", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return GenericAssetTokenBalance;
}(graph_ts_1.Entity));
exports.GenericAssetTokenBalance = GenericAssetTokenBalance;
var AaveWalletManager = /** @class */ (function (_super) {
    __extends(AaveWalletManager, _super);
    function AaveWalletManager(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("name", graph_ts_1.Value.fromString(""));
        _this.set("address", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    AaveWalletManager.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save AaveWalletManager entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save AaveWalletManager entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("AaveWalletManager", id.toString(), this);
        }
    };
    AaveWalletManager.load = function (id) {
        return changetype(graph_ts_1.store.get("AaveWalletManager", id));
    };
    Object.defineProperty(AaveWalletManager.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "name", {
        get: function () {
            var value = this.get("name");
            return value.toString();
        },
        set: function (value) {
            this.set("name", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "address", {
        get: function () {
            var value = this.get("address");
            return value.toBytes();
        },
        set: function (value) {
            this.set("address", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "paused", {
        get: function () {
            var value = this.get("paused");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("paused", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "chargedManager", {
        get: function () {
            var value = this.get("chargedManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedManager");
            }
            else {
                this.set("chargedManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "chargedParticles", {
        get: function () {
            var value = this.get("chargedParticles");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedParticles");
            }
            else {
                this.set("chargedParticles", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "aaveBridge", {
        get: function () {
            var value = this.get("aaveBridge");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("aaveBridge");
            }
            else {
                this.set("aaveBridge", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "executor", {
        get: function () {
            var value = this.get("executor");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("executor");
            }
            else {
                this.set("executor", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveWalletManager.prototype, "wallets", {
        get: function () {
            var value = this.get("wallets");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("wallets", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return AaveWalletManager;
}(graph_ts_1.Entity));
exports.AaveWalletManager = AaveWalletManager;
var AaveSmartWallet = /** @class */ (function (_super) {
    __extends(AaveSmartWallet, _super);
    function AaveSmartWallet(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    AaveSmartWallet.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save AaveSmartWallet entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save AaveSmartWallet entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("AaveSmartWallet", id.toString(), this);
        }
    };
    AaveSmartWallet.load = function (id) {
        return changetype(graph_ts_1.store.get("AaveSmartWallet", id));
    };
    Object.defineProperty(AaveSmartWallet.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "address", {
        get: function () {
            var value = this.get("address");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("address");
            }
            else {
                this.set("address", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "walletManager", {
        get: function () {
            var value = this.get("walletManager");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("walletManager");
            }
            else {
                this.set("walletManager", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "managerId", {
        get: function () {
            var value = this.get("managerId");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("managerId");
            }
            else {
                this.set("managerId", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "assetTokens", {
        get: function () {
            var value = this.get("assetTokens");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytesArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("assetTokens");
            }
            else {
                this.set("assetTokens", graph_ts_1.Value.fromBytesArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "nftCreator", {
        get: function () {
            var value = this.get("nftCreator");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("nftCreator");
            }
            else {
                this.set("nftCreator", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "nftCreatorAnnuityPct", {
        get: function () {
            var value = this.get("nftCreatorAnnuityPct");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("nftCreatorAnnuityPct");
            }
            else {
                this.set("nftCreatorAnnuityPct", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "nftCreatorAnnuityRedirect", {
        get: function () {
            var value = this.get("nftCreatorAnnuityRedirect");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("nftCreatorAnnuityRedirect");
            }
            else {
                this.set("nftCreatorAnnuityRedirect", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveSmartWallet.prototype, "assetBalances", {
        get: function () {
            var value = this.get("assetBalances");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("assetBalances", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return AaveSmartWallet;
}(graph_ts_1.Entity));
exports.AaveSmartWallet = AaveSmartWallet;
var AaveAssetTokenBalance = /** @class */ (function (_super) {
    __extends(AaveAssetTokenBalance, _super);
    function AaveAssetTokenBalance(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("assetToken", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("name", graph_ts_1.Value.fromString(""));
        _this.set("symbol", graph_ts_1.Value.fromString(""));
        _this.set("decimals", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("principal", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("ownerInterestDischarged", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("creatorInterestDischarged", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    AaveAssetTokenBalance.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save AaveAssetTokenBalance entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save AaveAssetTokenBalance entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("AaveAssetTokenBalance", id.toString(), this);
        }
    };
    AaveAssetTokenBalance.load = function (id) {
        return changetype(graph_ts_1.store.get("AaveAssetTokenBalance", id));
    };
    Object.defineProperty(AaveAssetTokenBalance.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "smartWallet", {
        get: function () {
            var value = this.get("smartWallet");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("smartWallet");
            }
            else {
                this.set("smartWallet", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "assetToken", {
        get: function () {
            var value = this.get("assetToken");
            return value.toBytes();
        },
        set: function (value) {
            this.set("assetToken", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "name", {
        get: function () {
            var value = this.get("name");
            return value.toString();
        },
        set: function (value) {
            this.set("name", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "symbol", {
        get: function () {
            var value = this.get("symbol");
            return value.toString();
        },
        set: function (value) {
            this.set("symbol", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "decimals", {
        get: function () {
            var value = this.get("decimals");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("decimals", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "principal", {
        get: function () {
            var value = this.get("principal");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("principal", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "ownerInterestDischarged", {
        get: function () {
            var value = this.get("ownerInterestDischarged");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("ownerInterestDischarged", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AaveAssetTokenBalance.prototype, "creatorInterestDischarged", {
        get: function () {
            var value = this.get("creatorInterestDischarged");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("creatorInterestDischarged", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return AaveAssetTokenBalance;
}(graph_ts_1.Entity));
exports.AaveAssetTokenBalance = AaveAssetTokenBalance;
var WBoson = /** @class */ (function (_super) {
    __extends(WBoson, _super);
    function WBoson(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("wBoson", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("account", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    WBoson.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save WBoson entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save WBoson entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("WBoson", id.toString(), this);
        }
    };
    WBoson.load = function (id) {
        return changetype(graph_ts_1.store.get("WBoson", id));
    };
    Object.defineProperty(WBoson.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "wBoson", {
        get: function () {
            var value = this.get("wBoson");
            return value.toBytes();
        },
        set: function (value) {
            this.set("wBoson", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "account", {
        get: function () {
            var value = this.get("account");
            return value.toBytes();
        },
        set: function (value) {
            this.set("account", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "discarded", {
        get: function () {
            var value = this.get("discarded");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("discarded", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "wBosonUri", {
        get: function () {
            var value = this.get("wBosonUri");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("wBosonUri");
            }
            else {
                this.set("wBosonUri", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "description", {
        get: function () {
            var value = this.get("description");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("description");
            }
            else {
                this.set("description", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "thumbnail", {
        get: function () {
            var value = this.get("thumbnail");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("thumbnail");
            }
            else {
                this.set("thumbnail", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "image", {
        get: function () {
            var value = this.get("image");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("image");
            }
            else {
                this.set("image", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "email", {
        get: function () {
            var value = this.get("email");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("email");
            }
            else {
                this.set("email", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "twitter", {
        get: function () {
            var value = this.get("twitter");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("twitter");
            }
            else {
                this.set("twitter", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WBoson.prototype, "website", {
        get: function () {
            var value = this.get("website");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("website");
            }
            else {
                this.set("website", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return WBoson;
}(graph_ts_1.Entity));
exports.WBoson = WBoson;
var Ionx = /** @class */ (function (_super) {
    __extends(Ionx, _super);
    function Ionx(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    Ionx.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Ionx entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Ionx entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Ionx", id.toString(), this);
        }
    };
    Ionx.load = function (id) {
        return changetype(graph_ts_1.store.get("Ionx", id));
    };
    Object.defineProperty(Ionx.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ionx.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ionx.prototype, "universe", {
        get: function () {
            var value = this.get("universe");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("universe");
            }
            else {
                this.set("universe", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ionx.prototype, "holders", {
        get: function () {
            var value = this.get("holders");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("holders", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Ionx;
}(graph_ts_1.Entity));
exports.Ionx = Ionx;
var IonxHolder = /** @class */ (function (_super) {
    __extends(IonxHolder, _super);
    function IonxHolder(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("ionx", graph_ts_1.Value.fromString(""));
        _this.set("address", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("balance", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    IonxHolder.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save IonxHolder entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save IonxHolder entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("IonxHolder", id.toString(), this);
        }
    };
    IonxHolder.load = function (id) {
        return changetype(graph_ts_1.store.get("IonxHolder", id));
    };
    Object.defineProperty(IonxHolder.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IonxHolder.prototype, "ionx", {
        get: function () {
            var value = this.get("ionx");
            return value.toString();
        },
        set: function (value) {
            this.set("ionx", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IonxHolder.prototype, "address", {
        get: function () {
            var value = this.get("address");
            return value.toBytes();
        },
        set: function (value) {
            this.set("address", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IonxHolder.prototype, "balance", {
        get: function () {
            var value = this.get("balance");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("balance", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return IonxHolder;
}(graph_ts_1.Entity));
exports.IonxHolder = IonxHolder;
var ESAMultiplier = /** @class */ (function (_super) {
    __extends(ESAMultiplier, _super);
    function ESAMultiplier(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("universe", graph_ts_1.Value.fromString(""));
        _this.set("assetToken", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("multiplier", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    ESAMultiplier.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ESAMultiplier entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ESAMultiplier entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ESAMultiplier", id.toString(), this);
        }
    };
    ESAMultiplier.load = function (id) {
        return changetype(graph_ts_1.store.get("ESAMultiplier", id));
    };
    Object.defineProperty(ESAMultiplier.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ESAMultiplier.prototype, "universe", {
        get: function () {
            var value = this.get("universe");
            return value.toString();
        },
        set: function (value) {
            this.set("universe", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ESAMultiplier.prototype, "assetToken", {
        get: function () {
            var value = this.get("assetToken");
            return value.toBytes();
        },
        set: function (value) {
            this.set("assetToken", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ESAMultiplier.prototype, "multiplier", {
        get: function () {
            var value = this.get("multiplier");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("multiplier", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return ESAMultiplier;
}(graph_ts_1.Entity));
exports.ESAMultiplier = ESAMultiplier;
var ESALevel = /** @class */ (function (_super) {
    __extends(ESALevel, _super);
    function ESALevel(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("universe", graph_ts_1.Value.fromString(""));
        _this.set("accountAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("level", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    ESALevel.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ESALevel entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ESALevel entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ESALevel", id.toString(), this);
        }
    };
    ESALevel.load = function (id) {
        return changetype(graph_ts_1.store.get("ESALevel", id));
    };
    Object.defineProperty(ESALevel.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ESALevel.prototype, "universe", {
        get: function () {
            var value = this.get("universe");
            return value.toString();
        },
        set: function (value) {
            this.set("universe", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ESALevel.prototype, "accountAddress", {
        get: function () {
            var value = this.get("accountAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("accountAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ESALevel.prototype, "level", {
        get: function () {
            var value = this.get("level");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("level", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return ESALevel;
}(graph_ts_1.Entity));
exports.ESALevel = ESALevel;
var Proton = /** @class */ (function (_super) {
    __extends(Proton, _super);
    function Proton(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("version", graph_ts_1.Value.fromString(""));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    Proton.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Proton entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Proton entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Proton", id.toString(), this);
        }
    };
    Proton.load = function (id) {
        return changetype(graph_ts_1.store.get("Proton", id));
    };
    Object.defineProperty(Proton.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "version", {
        get: function () {
            var value = this.get("version");
            return value.toString();
        },
        set: function (value) {
            this.set("version", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "paused", {
        get: function () {
            var value = this.get("paused");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("paused", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "universe", {
        get: function () {
            var value = this.get("universe");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("universe");
            }
            else {
                this.set("universe", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "chargedSettings", {
        get: function () {
            var value = this.get("chargedSettings");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedSettings");
            }
            else {
                this.set("chargedSettings", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "chargedState", {
        get: function () {
            var value = this.get("chargedState");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedState");
            }
            else {
                this.set("chargedState", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "chargedParticles", {
        get: function () {
            var value = this.get("chargedParticles");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("chargedParticles");
            }
            else {
                this.set("chargedParticles", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Proton.prototype, "tokens", {
        get: function () {
            var value = this.get("tokens");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("tokens", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Proton;
}(graph_ts_1.Entity));
exports.Proton = Proton;
/* export class ProtonCount extends Entity{
  constructor(id: string) {
    super();
    
  }
} */
var ProtonNFT = /** @class */ (function (_super) {
    __extends(ProtonNFT, _super);
    function ProtonNFT(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("version", graph_ts_1.Value.fromString(""));
        _this.set("tokenAddress", graph_ts_1.Value.fromString(""));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("overallSalesTotal", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    ProtonNFT.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ProtonNFT entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ProtonNFT entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ProtonNFT", id.toString(), this);
        }
    };
    ProtonNFT.load = function (id) {
        return changetype(graph_ts_1.store.get("ProtonNFT", id));
    };
    Object.defineProperty(ProtonNFT.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "version", {
        get: function () {
            var value = this.get("version");
            return value.toString();
        },
        set: function (value) {
            this.set("version", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "tokenAddress", {
        get: function () {
            var value = this.get("tokenAddress");
            return value.toString();
        },
        set: function (value) {
            this.set("tokenAddress", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "proton", {
        get: function () {
            var value = this.get("proton");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("proton");
            }
            else {
                this.set("proton", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "creator", {
        get: function () {
            var value = this.get("creator");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("creator");
            }
            else {
                this.set("creator", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("owner");
            }
            else {
                this.set("owner", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "overallSalesTotal", {
        get: function () {
            var value = this.get("overallSalesTotal");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("overallSalesTotal", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "particleType", {
        get: function () {
            var value = this.get("particleType");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("particleType");
            }
            else {
                this.set("particleType", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "creatorAnnuity", {
        get: function () {
            var value = this.get("creatorAnnuity");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("creatorAnnuity");
            }
            else {
                this.set("creatorAnnuity", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "salePrice", {
        get: function () {
            var value = this.get("salePrice");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("salePrice");
            }
            else {
                this.set("salePrice", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "lastSalePrice", {
        get: function () {
            var value = this.get("lastSalePrice");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("lastSalePrice");
            }
            else {
                this.set("lastSalePrice", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "resaleRoyalties", {
        get: function () {
            var value = this.get("resaleRoyalties");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("resaleRoyalties");
            }
            else {
                this.set("resaleRoyalties", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "resaleRoyaltiesRedirect", {
        get: function () {
            var value = this.get("resaleRoyaltiesRedirect");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("resaleRoyaltiesRedirect");
            }
            else {
                this.set("resaleRoyaltiesRedirect", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "metadataUri", {
        get: function () {
            var value = this.get("metadataUri");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("metadataUri");
            }
            else {
                this.set("metadataUri", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "description", {
        get: function () {
            var value = this.get("description");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("description");
            }
            else {
                this.set("description", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "external_url", {
        get: function () {
            var value = this.get("external_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("external_url");
            }
            else {
                this.set("external_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "animation_url", {
        get: function () {
            var value = this.get("animation_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("animation_url");
            }
            else {
                this.set("animation_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "youtube_url", {
        get: function () {
            var value = this.get("youtube_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("youtube_url");
            }
            else {
                this.set("youtube_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "icon", {
        get: function () {
            var value = this.get("icon");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("icon");
            }
            else {
                this.set("icon", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "thumbnail", {
        get: function () {
            var value = this.get("thumbnail");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("thumbnail");
            }
            else {
                this.set("thumbnail", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "image", {
        get: function () {
            var value = this.get("image");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("image");
            }
            else {
                this.set("image", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "symbol", {
        get: function () {
            var value = this.get("symbol");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("symbol");
            }
            else {
                this.set("symbol", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "decimals", {
        get: function () {
            var value = this.get("decimals");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("decimals");
            }
            else {
                this.set("decimals", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "background_color", {
        get: function () {
            var value = this.get("background_color");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("background_color");
            }
            else {
                this.set("background_color", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNFT.prototype, "attributes", {
        get: function () {
            var value = this.get("attributes");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("attributes", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return ProtonNFT;
}(graph_ts_1.Entity));
exports.ProtonNFT = ProtonNFT;
var ProtonNftCount = /** @class */ (function (_super) {
    __extends(ProtonNftCount, _super);
    function ProtonNftCount(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("createdCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("ownedCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    ProtonNftCount.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ProtonNftCount entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ProtonNftCount entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ProtonNftCount", id.toString(), this);
        }
    };
    ProtonNftCount.load = function (id) {
        return changetype(graph_ts_1.store.get("ProtonNftCount", id));
    };
    Object.defineProperty(ProtonNftCount.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNftCount.prototype, "createdCount", {
        get: function () {
            var value = this.get("createdCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("createdCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNftCount.prototype, "ownedCount", {
        get: function () {
            var value = this.get("ownedCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("ownedCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return ProtonNftCount;
}(graph_ts_1.Entity));
exports.ProtonNftCount = ProtonNftCount;
var ProtonNftAttributes = /** @class */ (function (_super) {
    __extends(ProtonNftAttributes, _super);
    function ProtonNftAttributes(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("protonNft", graph_ts_1.Value.fromString(""));
        return _this;
    }
    ProtonNftAttributes.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ProtonNftAttributes entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ProtonNftAttributes entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ProtonNftAttributes", id.toString(), this);
        }
    };
    ProtonNftAttributes.load = function (id) {
        return changetype(graph_ts_1.store.get("ProtonNftAttributes", id));
    };
    Object.defineProperty(ProtonNftAttributes.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNftAttributes.prototype, "protonNft", {
        get: function () {
            var value = this.get("protonNft");
            return value.toString();
        },
        set: function (value) {
            this.set("protonNft", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNftAttributes.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProtonNftAttributes.prototype, "value", {
        get: function () {
            var value = this.get("value");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("value");
            }
            else {
                this.set("value", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return ProtonNftAttributes;
}(graph_ts_1.Entity));
exports.ProtonNftAttributes = ProtonNftAttributes;
var StandardNFT = /** @class */ (function (_super) {
    __extends(StandardNFT, _super);
    function StandardNFT(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("tokenAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    StandardNFT.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save StandardNFT entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save StandardNFT entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("StandardNFT", id.toString(), this);
        }
    };
    StandardNFT.load = function (id) {
        return changetype(graph_ts_1.store.get("StandardNFT", id));
    };
    Object.defineProperty(StandardNFT.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "tokenAddress", {
        get: function () {
            var value = this.get("tokenAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("tokenAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("owner");
            }
            else {
                this.set("owner", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "metadataUri", {
        get: function () {
            var value = this.get("metadataUri");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("metadataUri");
            }
            else {
                this.set("metadataUri", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "description", {
        get: function () {
            var value = this.get("description");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("description");
            }
            else {
                this.set("description", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "external_url", {
        get: function () {
            var value = this.get("external_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("external_url");
            }
            else {
                this.set("external_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "icon", {
        get: function () {
            var value = this.get("icon");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("icon");
            }
            else {
                this.set("icon", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "image", {
        get: function () {
            var value = this.get("image");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("image");
            }
            else {
                this.set("image", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "symbol", {
        get: function () {
            var value = this.get("symbol");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("symbol");
            }
            else {
                this.set("symbol", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNFT.prototype, "attributes", {
        get: function () {
            var value = this.get("attributes");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("attributes", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return StandardNFT;
}(graph_ts_1.Entity));
exports.StandardNFT = StandardNFT;
var StandardNftAttributes = /** @class */ (function (_super) {
    __extends(StandardNftAttributes, _super);
    function StandardNftAttributes(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("standardNft", graph_ts_1.Value.fromString(""));
        return _this;
    }
    StandardNftAttributes.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save StandardNftAttributes entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save StandardNftAttributes entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("StandardNftAttributes", id.toString(), this);
        }
    };
    StandardNftAttributes.load = function (id) {
        return changetype(graph_ts_1.store.get("StandardNftAttributes", id));
    };
    Object.defineProperty(StandardNftAttributes.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNftAttributes.prototype, "standardNft", {
        get: function () {
            var value = this.get("standardNft");
            return value.toString();
        },
        set: function (value) {
            this.set("standardNft", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNftAttributes.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StandardNftAttributes.prototype, "value", {
        get: function () {
            var value = this.get("value");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("value");
            }
            else {
                this.set("value", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return StandardNftAttributes;
}(graph_ts_1.Entity));
exports.StandardNftAttributes = StandardNftAttributes;
var Lepton = /** @class */ (function (_super) {
    __extends(Lepton, _super);
    function Lepton(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    Lepton.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Lepton entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Lepton entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Lepton", id.toString(), this);
        }
    };
    Lepton.load = function (id) {
        return changetype(graph_ts_1.store.get("Lepton", id));
    };
    Object.defineProperty(Lepton.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "paused", {
        get: function () {
            var value = this.get("paused");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("paused", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "totalMinted", {
        get: function () {
            var value = this.get("totalMinted");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("totalMinted");
            }
            else {
                this.set("totalMinted", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "typeIndex", {
        get: function () {
            var value = this.get("typeIndex");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("typeIndex");
            }
            else {
                this.set("typeIndex", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "maxSupply", {
        get: function () {
            var value = this.get("maxSupply");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("maxSupply");
            }
            else {
                this.set("maxSupply", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "maxMintPerTx", {
        get: function () {
            var value = this.get("maxMintPerTx");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("maxMintPerTx");
            }
            else {
                this.set("maxMintPerTx", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "types", {
        get: function () {
            var value = this.get("types");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("types", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton.prototype, "tokens", {
        get: function () {
            var value = this.get("tokens");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("tokens", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Lepton;
}(graph_ts_1.Entity));
exports.Lepton = Lepton;
var Lepton2 = /** @class */ (function (_super) {
    __extends(Lepton2, _super);
    function Lepton2(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    Lepton2.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Lepton2 entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Lepton2 entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Lepton2", id.toString(), this);
        }
    };
    Lepton2.load = function (id) {
        return changetype(graph_ts_1.store.get("Lepton2", id));
    };
    Object.defineProperty(Lepton2.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "paused", {
        get: function () {
            var value = this.get("paused");
            return value.toBoolean();
        },
        set: function (value) {
            this.set("paused", graph_ts_1.Value.fromBoolean(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "totalMinted", {
        get: function () {
            var value = this.get("totalMinted");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("totalMinted");
            }
            else {
                this.set("totalMinted", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "typeIndex", {
        get: function () {
            var value = this.get("typeIndex");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("typeIndex");
            }
            else {
                this.set("typeIndex", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "maxSupply", {
        get: function () {
            var value = this.get("maxSupply");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("maxSupply");
            }
            else {
                this.set("maxSupply", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "maxMintPerTx", {
        get: function () {
            var value = this.get("maxMintPerTx");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("maxMintPerTx");
            }
            else {
                this.set("maxMintPerTx", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "types", {
        get: function () {
            var value = this.get("types");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("types", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Lepton2.prototype, "tokens", {
        get: function () {
            var value = this.get("tokens");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("tokens", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Lepton2;
}(graph_ts_1.Entity));
exports.Lepton2 = Lepton2;
var LeptonClassification = /** @class */ (function (_super) {
    __extends(LeptonClassification, _super);
    function LeptonClassification(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    LeptonClassification.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save LeptonClassification entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save LeptonClassification entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("LeptonClassification", id.toString(), this);
        }
    };
    LeptonClassification.load = function (id) {
        return changetype(graph_ts_1.store.get("LeptonClassification", id));
    };
    Object.defineProperty(LeptonClassification.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "lepton", {
        get: function () {
            var value = this.get("lepton");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("lepton");
            }
            else {
                this.set("lepton", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "lepton2", {
        get: function () {
            var value = this.get("lepton2");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("lepton2");
            }
            else {
                this.set("lepton2", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "metadataUri", {
        get: function () {
            var value = this.get("metadataUri");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("metadataUri");
            }
            else {
                this.set("metadataUri", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "price", {
        get: function () {
            var value = this.get("price");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("price");
            }
            else {
                this.set("price", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "supply", {
        get: function () {
            var value = this.get("supply");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("supply");
            }
            else {
                this.set("supply", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "multiplier", {
        get: function () {
            var value = this.get("multiplier");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("multiplier");
            }
            else {
                this.set("multiplier", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "bonus", {
        get: function () {
            var value = this.get("bonus");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("bonus");
            }
            else {
                this.set("bonus", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonClassification.prototype, "upperBounds", {
        get: function () {
            var value = this.get("upperBounds");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("upperBounds");
            }
            else {
                this.set("upperBounds", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return LeptonClassification;
}(graph_ts_1.Entity));
exports.LeptonClassification = LeptonClassification;
var LeptonNFT = /** @class */ (function (_super) {
    __extends(LeptonNFT, _super);
    function LeptonNFT(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    LeptonNFT.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save LeptonNFT entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save LeptonNFT entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("LeptonNFT", id.toString(), this);
        }
    };
    LeptonNFT.load = function (id) {
        return changetype(graph_ts_1.store.get("LeptonNFT", id));
    };
    Object.defineProperty(LeptonNFT.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "lepton", {
        get: function () {
            var value = this.get("lepton");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("lepton");
            }
            else {
                this.set("lepton", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "lepton2", {
        get: function () {
            var value = this.get("lepton2");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("lepton2");
            }
            else {
                this.set("lepton2", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBytes();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("owner");
            }
            else {
                this.set("owner", graph_ts_1.Value.fromBytes(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "price", {
        get: function () {
            var value = this.get("price");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("price");
            }
            else {
                this.set("price", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "supply", {
        get: function () {
            var value = this.get("supply");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("supply");
            }
            else {
                this.set("supply", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "multiplier", {
        get: function () {
            var value = this.get("multiplier");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("multiplier");
            }
            else {
                this.set("multiplier", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "bonus", {
        get: function () {
            var value = this.get("bonus");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("bonus");
            }
            else {
                this.set("bonus", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "metadataUri", {
        get: function () {
            var value = this.get("metadataUri");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("metadataUri");
            }
            else {
                this.set("metadataUri", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "name", {
        get: function () {
            var value = this.get("name");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("name");
            }
            else {
                this.set("name", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "description", {
        get: function () {
            var value = this.get("description");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("description");
            }
            else {
                this.set("description", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "external_url", {
        get: function () {
            var value = this.get("external_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("external_url");
            }
            else {
                this.set("external_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "animation_url", {
        get: function () {
            var value = this.get("animation_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("animation_url");
            }
            else {
                this.set("animation_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "youtube_url", {
        get: function () {
            var value = this.get("youtube_url");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("youtube_url");
            }
            else {
                this.set("youtube_url", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "thumbnail", {
        get: function () {
            var value = this.get("thumbnail");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("thumbnail");
            }
            else {
                this.set("thumbnail", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "image", {
        get: function () {
            var value = this.get("image");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("image");
            }
            else {
                this.set("image", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LeptonNFT.prototype, "symbol", {
        get: function () {
            var value = this.get("symbol");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("symbol");
            }
            else {
                this.set("symbol", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return LeptonNFT;
}(graph_ts_1.Entity));
exports.LeptonNFT = LeptonNFT;
var NftTxHistory = /** @class */ (function (_super) {
    __extends(NftTxHistory, _super);
    function NftTxHistory(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("eventType", graph_ts_1.Value.fromString(""));
        _this.set("eventData", graph_ts_1.Value.fromString(""));
        return _this;
    }
    NftTxHistory.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save NftTxHistory entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NftTxHistory entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("NftTxHistory", id.toString(), this);
        }
    };
    NftTxHistory.load = function (id) {
        return changetype(graph_ts_1.store.get("NftTxHistory", id));
    };
    Object.defineProperty(NftTxHistory.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxHistory.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxHistory.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxHistory.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxHistory.prototype, "eventType", {
        get: function () {
            var value = this.get("eventType");
            return value.toString();
        },
        set: function (value) {
            this.set("eventType", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxHistory.prototype, "eventData", {
        get: function () {
            var value = this.get("eventData");
            return value.toString();
        },
        set: function (value) {
            this.set("eventData", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    return NftTxHistory;
}(graph_ts_1.Entity));
exports.NftTxHistory = NftTxHistory;
var NftTxCount = /** @class */ (function (_super) {
    __extends(NftTxCount, _super);
    function NftTxCount(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("count", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    NftTxCount.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save NftTxCount entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NftTxCount entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("NftTxCount", id.toString(), this);
        }
    };
    NftTxCount.load = function (id) {
        return changetype(graph_ts_1.store.get("NftTxCount", id));
    };
    Object.defineProperty(NftTxCount.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxCount.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxCount.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftTxCount.prototype, "count", {
        get: function () {
            var value = this.get("count");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("count", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return NftTxCount;
}(graph_ts_1.Entity));
exports.NftTxCount = NftTxCount;
var UserRoyalty = /** @class */ (function (_super) {
    __extends(UserRoyalty, _super);
    function UserRoyalty(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("accountAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("claimableRoyalties", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("royaltiesClaimed", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    UserRoyalty.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save UserRoyalty entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save UserRoyalty entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("UserRoyalty", id.toString(), this);
        }
    };
    UserRoyalty.load = function (id) {
        return changetype(graph_ts_1.store.get("UserRoyalty", id));
    };
    Object.defineProperty(UserRoyalty.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserRoyalty.prototype, "accountAddress", {
        get: function () {
            var value = this.get("accountAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("accountAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserRoyalty.prototype, "claimableRoyalties", {
        get: function () {
            var value = this.get("claimableRoyalties");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("claimableRoyalties", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserRoyalty.prototype, "royaltiesClaimed", {
        get: function () {
            var value = this.get("royaltiesClaimed");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("royaltiesClaimed", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return UserRoyalty;
}(graph_ts_1.Entity));
exports.UserRoyalty = UserRoyalty;
var ApprovedOperator = /** @class */ (function (_super) {
    __extends(ApprovedOperator, _super);
    function ApprovedOperator(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("operatorAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("ownerAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("assetAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    ApprovedOperator.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ApprovedOperator entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ApprovedOperator entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ApprovedOperator", id.toString(), this);
        }
    };
    ApprovedOperator.load = function (id) {
        return changetype(graph_ts_1.store.get("ApprovedOperator", id));
    };
    Object.defineProperty(ApprovedOperator.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApprovedOperator.prototype, "operatorAddress", {
        get: function () {
            var value = this.get("operatorAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("operatorAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApprovedOperator.prototype, "ownerAddress", {
        get: function () {
            var value = this.get("ownerAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("ownerAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApprovedOperator.prototype, "assetAddress", {
        get: function () {
            var value = this.get("assetAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("assetAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ApprovedOperator.prototype, "tokenIds", {
        get: function () {
            var value = this.get("tokenIds");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigIntArray();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("tokenIds");
            }
            else {
                this.set("tokenIds", graph_ts_1.Value.fromBigIntArray(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return ApprovedOperator;
}(graph_ts_1.Entity));
exports.ApprovedOperator = ApprovedOperator;
var AssetTokenAnalytic = /** @class */ (function (_super) {
    __extends(AssetTokenAnalytic, _super);
    function AssetTokenAnalytic(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("totalAssetsLocked", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalAssetsLockedAave", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalAssetsLockedERC20", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    AssetTokenAnalytic.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save AssetTokenAnalytic entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save AssetTokenAnalytic entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("AssetTokenAnalytic", id.toString(), this);
        }
    };
    AssetTokenAnalytic.load = function (id) {
        return changetype(graph_ts_1.store.get("AssetTokenAnalytic", id));
    };
    Object.defineProperty(AssetTokenAnalytic.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssetTokenAnalytic.prototype, "totalAssetsLocked", {
        get: function () {
            var value = this.get("totalAssetsLocked");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalAssetsLocked", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssetTokenAnalytic.prototype, "totalAssetsLockedAave", {
        get: function () {
            var value = this.get("totalAssetsLockedAave");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalAssetsLockedAave", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssetTokenAnalytic.prototype, "totalAssetsLockedERC20", {
        get: function () {
            var value = this.get("totalAssetsLockedERC20");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalAssetsLockedERC20", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return AssetTokenAnalytic;
}(graph_ts_1.Entity));
exports.AssetTokenAnalytic = AssetTokenAnalytic;
var NftAnalytic = /** @class */ (function (_super) {
    __extends(NftAnalytic, _super);
    function NftAnalytic(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("contractAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenId", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalSalesVolume", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalRoyalties", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("numSales", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    NftAnalytic.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save NftAnalytic entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NftAnalytic entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("NftAnalytic", id.toString(), this);
        }
    };
    NftAnalytic.load = function (id) {
        return changetype(graph_ts_1.store.get("NftAnalytic", id));
    };
    Object.defineProperty(NftAnalytic.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftAnalytic.prototype, "contractAddress", {
        get: function () {
            var value = this.get("contractAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("contractAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftAnalytic.prototype, "tokenId", {
        get: function () {
            var value = this.get("tokenId");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("tokenId", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftAnalytic.prototype, "totalSalesVolume", {
        get: function () {
            var value = this.get("totalSalesVolume");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalSalesVolume", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftAnalytic.prototype, "totalRoyalties", {
        get: function () {
            var value = this.get("totalRoyalties");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalRoyalties", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NftAnalytic.prototype, "numSales", {
        get: function () {
            var value = this.get("numSales");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("numSales", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return NftAnalytic;
}(graph_ts_1.Entity));
exports.NftAnalytic = NftAnalytic;
var ProfileMetric = /** @class */ (function (_super) {
    __extends(ProfileMetric, _super);
    function ProfileMetric(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("totalEthEarned", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("buyProtonCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("sellProtonCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("mintProtonCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("buyLeptonCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("transferLeptonCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("energizeAaveCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("energizeERC20Count", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("dischargeInterestCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("releaseMassCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("royaltiesClaimedCount", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    ProfileMetric.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save ProfileMetric entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save ProfileMetric entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("ProfileMetric", id.toString(), this);
        }
    };
    ProfileMetric.load = function (id) {
        return changetype(graph_ts_1.store.get("ProfileMetric", id));
    };
    Object.defineProperty(ProfileMetric.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "totalEthEarned", {
        get: function () {
            var value = this.get("totalEthEarned");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalEthEarned", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "buyProtonCount", {
        get: function () {
            var value = this.get("buyProtonCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("buyProtonCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "sellProtonCount", {
        get: function () {
            var value = this.get("sellProtonCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("sellProtonCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "mintProtonCount", {
        get: function () {
            var value = this.get("mintProtonCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("mintProtonCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "buyLeptonCount", {
        get: function () {
            var value = this.get("buyLeptonCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("buyLeptonCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "transferLeptonCount", {
        get: function () {
            var value = this.get("transferLeptonCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("transferLeptonCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "energizeAaveCount", {
        get: function () {
            var value = this.get("energizeAaveCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("energizeAaveCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "energizeERC20Count", {
        get: function () {
            var value = this.get("energizeERC20Count");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("energizeERC20Count", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "dischargeInterestCount", {
        get: function () {
            var value = this.get("dischargeInterestCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("dischargeInterestCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "releaseMassCount", {
        get: function () {
            var value = this.get("releaseMassCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("releaseMassCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProfileMetric.prototype, "royaltiesClaimedCount", {
        get: function () {
            var value = this.get("royaltiesClaimedCount");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("royaltiesClaimedCount", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return ProfileMetric;
}(graph_ts_1.Entity));
exports.ProfileMetric = ProfileMetric;
var UserTokenMetric = /** @class */ (function (_super) {
    __extends(UserTokenMetric, _super);
    function UserTokenMetric(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("lifetimeValueLocked", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalMassReleased", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("totalInterestDischarged", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    UserTokenMetric.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save UserTokenMetric entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save UserTokenMetric entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("UserTokenMetric", id.toString(), this);
        }
    };
    UserTokenMetric.load = function (id) {
        return changetype(graph_ts_1.store.get("UserTokenMetric", id));
    };
    Object.defineProperty(UserTokenMetric.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserTokenMetric.prototype, "lifetimeValueLocked", {
        get: function () {
            var value = this.get("lifetimeValueLocked");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("lifetimeValueLocked", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserTokenMetric.prototype, "totalMassReleased", {
        get: function () {
            var value = this.get("totalMassReleased");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalMassReleased", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UserTokenMetric.prototype, "totalInterestDischarged", {
        get: function () {
            var value = this.get("totalInterestDischarged");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalInterestDischarged", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return UserTokenMetric;
}(graph_ts_1.Entity));
exports.UserTokenMetric = UserTokenMetric;
var PlatformMetric = /** @class */ (function (_super) {
    __extends(PlatformMetric, _super);
    function PlatformMetric(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("platformEthEarned", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("platformInterestDischarged", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("platformProtonsMinted", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    PlatformMetric.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save PlatformMetric entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save PlatformMetric entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("PlatformMetric", id.toString(), this);
        }
    };
    PlatformMetric.load = function (id) {
        return changetype(graph_ts_1.store.get("PlatformMetric", id));
    };
    Object.defineProperty(PlatformMetric.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlatformMetric.prototype, "platformEthEarned", {
        get: function () {
            var value = this.get("platformEthEarned");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("platformEthEarned", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlatformMetric.prototype, "platformInterestDischarged", {
        get: function () {
            var value = this.get("platformInterestDischarged");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("platformInterestDischarged", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlatformMetric.prototype, "platformProtonsMinted", {
        get: function () {
            var value = this.get("platformProtonsMinted");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("platformProtonsMinted", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return PlatformMetric;
}(graph_ts_1.Entity));
exports.PlatformMetric = PlatformMetric;
var Staking = /** @class */ (function (_super) {
    __extends(Staking, _super);
    function Staking(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("owner", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        return _this;
    }
    Staking.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Staking entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Staking entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Staking", id.toString(), this);
        }
    };
    Staking.load = function (id) {
        return changetype(graph_ts_1.store.get("Staking", id));
    };
    Object.defineProperty(Staking.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Staking.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Staking.prototype, "poolSize", {
        get: function () {
            var value = this.get("poolSize");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("poolSize", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Staking.prototype, "userDeposits", {
        get: function () {
            var value = this.get("userDeposits");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("userDeposits", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Staking;
}(graph_ts_1.Entity));
exports.Staking = Staking;
var StakedPools = /** @class */ (function (_super) {
    __extends(StakedPools, _super);
    function StakedPools(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("staking", graph_ts_1.Value.fromString(""));
        _this.set("tokenAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("totalBalance", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    StakedPools.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save StakedPools entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save StakedPools entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("StakedPools", id.toString(), this);
        }
    };
    StakedPools.load = function (id) {
        return changetype(graph_ts_1.store.get("StakedPools", id));
    };
    Object.defineProperty(StakedPools.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedPools.prototype, "staking", {
        get: function () {
            var value = this.get("staking");
            return value.toString();
        },
        set: function (value) {
            this.set("staking", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedPools.prototype, "tokenAddress", {
        get: function () {
            var value = this.get("tokenAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("tokenAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedPools.prototype, "totalBalance", {
        get: function () {
            var value = this.get("totalBalance");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("totalBalance", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return StakedPools;
}(graph_ts_1.Entity));
exports.StakedPools = StakedPools;
var StakedDeposits = /** @class */ (function (_super) {
    __extends(StakedDeposits, _super);
    function StakedDeposits(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("staking", graph_ts_1.Value.fromString(""));
        _this.set("userAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("tokenAddress", graph_ts_1.Value.fromBytes(graph_ts_1.Bytes.empty()));
        _this.set("balance", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    StakedDeposits.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save StakedDeposits entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save StakedDeposits entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("StakedDeposits", id.toString(), this);
        }
    };
    StakedDeposits.load = function (id) {
        return changetype(graph_ts_1.store.get("StakedDeposits", id));
    };
    Object.defineProperty(StakedDeposits.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedDeposits.prototype, "staking", {
        get: function () {
            var value = this.get("staking");
            return value.toString();
        },
        set: function (value) {
            this.set("staking", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedDeposits.prototype, "userAddress", {
        get: function () {
            var value = this.get("userAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("userAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedDeposits.prototype, "tokenAddress", {
        get: function () {
            var value = this.get("tokenAddress");
            return value.toBytes();
        },
        set: function (value) {
            this.set("tokenAddress", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StakedDeposits.prototype, "balance", {
        get: function () {
            var value = this.get("balance");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("balance", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return StakedDeposits;
}(graph_ts_1.Entity));
exports.StakedDeposits = StakedDeposits;
